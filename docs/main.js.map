{"version":3,"sources":["./src/environments/environment.ts","./src/app/components/game-board/game-board.component.ts","./src/app/components/game-board/game-board.component.html","./src/app/app.component.ts","./src/app/app.component.html","./src/app/enums/battleship.enum.ts","./src/app/app.module.ts","./src/app/layout/play-game/play-game.component.ts","./src/app/layout/play-game/play-game.component.html","./src/app/pipes/matrix.pipe.ts","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAAA;AAA+E;AAEpB;;;;;ICF3D,yEAA4C;IAC1C,uDACF;IAAA,4DAAM;;;IADJ,0DACF;IADE,gGACF;;;IAOM,wEAAgE;IAAA,uDAAS;IAAA,4DAAK;;;IAAd,0DAAS;IAAT,yEAAS;;;IAanE,qEAAuF;;;IACvF,qEAA4G;;;;;IALhH,wEAAsF;IAEpF,6EACkF;IAD1E,mbAAgC;IAEtC,wIAAuF;IACvF,wIAA4G;IAC9G,4DAAS;IACX,4DAAK;;;;;;IALsC,0DAA4B;IAA5B,4FAA4B;IAE5C,0DAAmB;IAAnB,kFAAmB;IACnB,0DAAuC;IAAvC,yGAAuC;;;IANpE,wEAAuE;IACrE,gIAOK;;IACP,qEAAe;;;;;IARR,0DAAiD;IAAjD,4KAAiD;;;IAJ1D,wEAAwG;IACtG,wEAA8B;IAAA,uDAAqB;IAAA,4DAAK;IAExD,qIASe;IAEjB,4DAAK;;;;IAb2B,0DAAqB;IAArB,4FAAqB;IAElB,0DAAoB;IAApB,2FAAoB;;ADNpD,MAAM,kBAAkB;IA2B7B;QAxBQ,kBAAa,GAAW,EAAE,CAAC;QAK5B,iBAAY,GAAW,EAAE,CAAC;QAC1B,kBAAa,GAAW,EAAE,CAAC;QAC3B,gBAAW,GAAa,EAAE,CAAC;QAC3B,gBAAW,GAAa,EAAE,CAAC;QAGxB,qBAAgB,GAA6B,IAAI,0DAAY,EAAc,CAAC;IAatE,CAAC;IAXjB,IACI,SAAS,KAAiB,OAAO,IAAI,CAAC,UAAU,EAAC,CAAC;IAAA,CAAC;IACvD,IAAI,SAAS,CAAC,SAAqB;QACjC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;QAC5B,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,aAAa,IAAI,SAAS,KAAK,wEAAU,CAAC,OAAO,EAAE;YAClF,IAAI,CAAC,YAAY,EAAE,CAAC;SACrB;IACH,CAAC;IAMD,QAAQ;QACN,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC;QAC9D,IAAI,CAAC,iBAAiB,EAAE,CAAC;QACzB,IAAI,CAAC,YAAY,EAAE,CAAC;IACtB,CAAC;IAEO,iBAAiB;QACvB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;YAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;SAC3D;QAED,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,YAAY,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SAC1B;IACH,CAAC;IAEO,kBAAkB;QACxB,IAAI,CAAC,eAAe,GAAG,EAAE,CAAC;QAC1B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC,EAAE,EAAE;YAC7C,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC;SACtE;IACH,CAAC;IAEO,WAAW;QACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC,EAAE,EAAE;YAC3C,IAAI,YAAY,GAAW,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;YAE5E,OAAO,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE;gBAChD,YAAY,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,IAAI,CAAC,eAAe,CAAC,CAAC;aACjE;YAED,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC,MAAM,GAAG,IAAI,CAAC;SAClD;IACH,CAAC;IAEM,SAAS,CAAC,KAAK;QACpB,OAAO,KAAK,CAAC;IACf,CAAC;IAEM,OAAO,CAAC,MAAc;QAC3B,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAEM,aAAa,CAAC,WAAmB;QACtC,IAAI,CAAC,eAAe,EAAE,CAAC;QACvB,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,SAAS,GAAG,IAAI,CAAC;QAEnD,IAAI,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,CAAC,MAAM,EAAE;YAC5C,IAAI,CAAC,cAAc,EAAE,CAAC;SACvB;QAED,IAAI,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,aAAa,EAAE;YAC9C,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,wEAAU,CAAC,GAAG,CAAC,CAAC;YAC3C,IAAI,CAAC,YAAY,GAAG,cAAc,CAAC;SACpC;IACH,CAAC;IAEO,YAAY;QAClB,IAAI,CAAC,YAAY,GAAG,EAAE,CAAC;QACvB,IAAI,CAAC,cAAc,GAAG,CAAC,CAAC;QACxB,IAAI,CAAC,eAAe,GAAG,CAAC,CAAC;QACzB,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC1B,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;;oFA5FU,kBAAkB;kGAAlB,kBAAkB;QCX/B,8GAEM;QAGN,2EAAoG;QAClG,wEAAO;QACL,qEAAI;QACF,gEAAS;QACT,4GAA8E;QAChF,4DAAK;QACP,4DAAQ;QAER,wEAAO;QACL,4GAcK;QACP,4DAAQ;QACV,4DAAQ;;QA9BgB,kFAAkB;QAKhB,0DAAyE;QAAzE,0IAAyE;QAIvE,0DAAc;QAAd,oFAAc;QAKK,0DAA0B;QAA1B,kGAA0B;;;;;;;;;;;;;;;;;;;;ACNlE,MAAM,YAAY;IANzB;QAOE,UAAK,GAAG,YAAY,CAAC;KACtB;;wEAFY,YAAY;4FAAZ,YAAY;QCRzB,yEAAwB;QACtB,2EAA+B;QACjC,4DAAM;;;;;;;;;;;;;;ACFN;AAAA;AAAA,IAAY,UAIX;AAJD,WAAY,UAAU;IAClB,yCAAO;IACP,iDAAW;IACX,4CAAS;AACb,CAAC,EAJW,UAAU,KAAV,UAAU,QAIrB;;;;;;;;;;;;;ACHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACF;AAExD,SAAS;AACkE;AAE3E,aAAa;AACkC;AACmC;AAElF,QAAQ;AACyC;;AAgB1C,MAAM,SAAS;;wFAAT,SAAS,cAFR,2DAAY;4IAEb,SAAS,mBAHT,EAAE,YAJJ;YACP,uEAAa;YACb,oEAAgB;SACjB;mIAIU,SAAS,mBAZlB,2DAAY;QACZ,8FAAkB;QAClB,6DAAU;QACV,uFAAiB,aAGjB,uEAAa;QACb,oEAAgB;;;;;;;;;;;;;ACrBpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAA2D;;;;;;ICOvD,4EAAyE;IAApB,sTAAmB;IAAC,mEAAQ;IAAA,4DAAS;;ADCvF,MAAM,iBAAiB;IAG5B;QAFO,cAAS,GAAe,wEAAU,CAAC,OAAO,CAAC;IAElC,CAAC;IAEjB,QAAQ;IACR,CAAC;IAEM,gBAAgB,CAAC,YAAwB;QAC9C,IAAI,CAAC,SAAS,GAAG,YAAY,CAAC;IAChC,CAAC;IAEM,OAAO;QACZ,IAAI,CAAC,SAAS,GAAG,wEAAU,CAAC,OAAO,CAAC;IACtC,CAAC;;kFAdU,iBAAiB;iGAAjB,iBAAiB;QCV9B,yEAAQ;QACJ,wEAAoB;QAAA,qEAAU;QAAA,4DAAK;QACvC,4DAAS;QAET,uEAAM;QACF,oFAAsF;QAA9C,6KAAoB,4BAAwB,IAAC;QAAC,4DAAiB;QAC3G,4DAAO;QAEP,yEAAQ;QACJ,mHAA0F;QAC9F,4DAAS;;QALW,0DAAuB;QAAvB,oFAAuB;QAIT,0DAAqB;QAArB,qFAAqB;;;;;;;;;;;;;;;;;;ACHhD,MAAM,UAAU;IAErB,SAAS,CAAC,WAAmB,EAAE,QAAgB,EAAE,aAAqB;QACpE,IAAI,cAAc,GAAG,WAAW,GAAG,CAAC,GAAG,QAAQ,GAAG,aAAa,CAAC;QAChE,IAAI,aAAa,GAAG,WAAW,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,GAAG,aAAa,CAAC;QAEjE,OAAO,cAAc,IAAI,aAAa,CAAC;IACzC,CAAC;;oEAPU,UAAU;0GAAV,UAAU;;;;;;;;;;;;;ACLvB;AAAA;AAAA;AAAA;AAAA;AAAuD;AAEoB;;;AAE3E,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,YAAY,EAAE,SAAS,EAAE,uFAAiB,EAAE;IACpD,EAAE,IAAI,EAAE,EAAE,EAAE,SAAS,EAAE,MAAM,EAAE,UAAU,EAAE,YAAY,EAAE;CAC1D,CAAC;AAOK,MAAM,gBAAgB;;+FAAhB,gBAAgB;0JAAhB,gBAAgB,kBAJlB,CAAC,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAC7B,4DAAY;mIAGX,gBAAgB,uFAHjB,4DAAY;;;;;;;;;;;;;;;;;;;ACZuB;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\n\r\nimport { EGameState } from 'src/app/enums/battleship.enum';\r\nimport { ISquareItem } from './game-board.interface';\r\n\r\n@Component({\r\n  selector: 'app-game-board',\r\n  templateUrl: './game-board.component.html',\r\n  styleUrls: ['./game-board.component.scss']\r\n})\r\n\r\nexport class GameBoardComponent implements OnInit {\r\n\r\n  private amountOfSquares: number;\r\n  private amountOfShips: number = 10;\r\n  private strikesCounter: number;\r\n\r\n  public progressCounter: number;\r\n  public boardSquaresArr: ISquareItem[];\r\n  public amountOfRows: number = 10;\r\n  public squaresPerRow: number = 10;\r\n  public xAxisLabels: string[] = [];\r\n  public yAxisLabels: number[] = [];\r\n  public gameStateMsg: string;\r\n\r\n  @Output() gameStateChanged: EventEmitter<EGameState> = new EventEmitter<EGameState>();\r\n\r\n  @Input()\r\n  get gameState(): EGameState { return this._gameState };\r\n  set gameState(gameState: EGameState) {\r\n    this._gameState = gameState;\r\n    if (this.strikesCounter === this.amountOfShips && gameState === EGameState.PLAYING) {\r\n      this.startNewGame();\r\n    }\r\n  }\r\n\r\n  private _gameState: EGameState;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n    this.amountOfSquares = this.amountOfRows * this.squaresPerRow;\r\n    this.createAxiesLabels();\r\n    this.startNewGame();\r\n  }\r\n\r\n  private createAxiesLabels() {\r\n    for (let i = 1; i <= this.squaresPerRow; i++) {\r\n      this.xAxisLabels.push((i + 9).toString(36).toUpperCase());\r\n    }\r\n\r\n    for (let i = 1; i <= this.amountOfRows; i++) {\r\n      this.yAxisLabels.push(i);\r\n    }\r\n  }\r\n\r\n  private createBoardSquares() {\r\n    this.boardSquaresArr = [];\r\n    for (let i = 0; i < this.amountOfSquares; i++) {\r\n      this.boardSquaresArr.push({ id: i, isShip: false, isClicked: false })\r\n    }\r\n  }\r\n\r\n  private spreadShips(): void {\r\n    for (let i = 0; i < this.amountOfShips; i++) {\r\n      let randomSquare: number = Math.floor(Math.random() * this.amountOfSquares);\r\n\r\n      while (this.boardSquaresArr[randomSquare].isShip) {\r\n        randomSquare = Math.floor(Math.random() * this.amountOfSquares);\r\n      }\r\n\r\n      this.boardSquaresArr[randomSquare].isShip = true;\r\n    }\r\n  }\r\n\r\n  public trackByFn(index): number {\r\n    return index;\r\n  }\r\n\r\n  public counter(length: number): number[] {\r\n    return new Array(length);\r\n  }\r\n\r\n  public squareClicked(squareIndex: number): void {\r\n    this.progressCounter++;\r\n    this.boardSquaresArr[squareIndex].isClicked = true;\r\n\r\n    if (this.boardSquaresArr[squareIndex].isShip) {\r\n      this.strikesCounter++;\r\n    }\r\n\r\n    if (this.strikesCounter === this.amountOfShips) {\r\n      this.gameStateChanged.emit(EGameState.WON);\r\n      this.gameStateMsg = 'You Go Girl!';\r\n    }\r\n  }\r\n  \r\n  private startNewGame(): void {\r\n    this.gameStateMsg = '';\r\n    this.strikesCounter = 0;\r\n    this.progressCounter = 0;\r\n    this.createBoardSquares();\r\n    this.spreadShips();\r\n  }\r\n}\r\n","<div class=\"state-msg\" *ngIf=\"gameStateMsg\">\r\n  {{ gameStateMsg }}\r\n</div>\r\n\r\n\r\n<table class=\"game-board\" [ngClass]=\"gameState === 0 ? '' : gameState === 1 ? 'success' : 'failed'\">\r\n  <thead>\r\n    <tr>\r\n      <td></td>\r\n      <th *ngFor=\"let label of xAxisLabels\" class=\"game-board-axises\">{{label}}</th>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tbody>\r\n    <tr class=\"game-board-row\" *ngFor=\"let row of counter(amountOfRows); trackBy: trackByFn; index as rowI\">\r\n      <th class=\"game-board-axises\">{{yAxisLabels[rowI]}}</th>\r\n\r\n      <ng-container *ngFor=\"let square of boardSquaresArr; index as squareI\">\r\n        <td *ngIf=\"squareI | matrixPipe : rowI : squaresPerRow\" class=\"game-board-row-square\">\r\n\r\n          <button (click)=\"squareClicked(squareI)\" [disabled]=\"gameState !== 0\" class=\"game-board-row-square-btn\"\r\n            [ngClass]=\"{'ship': square.isShip, 'clicked': square.isClicked}\" [id]=\"squareI\">\r\n            <img class=\"ship-img\" *ngIf=\"square.isShip\" src=\"./assets/submarine_3d.png\" alt=\"ship\">\r\n            <img class=\"boom-img\" *ngIf=\"square.isShip && square.isClicked\" src=\"./assets/Boom-PNG-File.png\" alt=\"boom\">\r\n          </button>\r\n        </td>\r\n      </ng-container>\r\n\r\n    </tr>\r\n  </tbody>\r\n</table>","import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss']\r\n})\r\n\r\nexport class AppComponent {\r\n  title = 'battleship';\r\n}\r\n","<div class=\"battleship\">\r\n  <router-outlet></router-outlet>\r\n</div>\r\n","export enum EGameState {\r\n    WON = 1,\r\n    PLAYING = 0,\r\n    LOST = -1,\r\n}","import { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\nimport { AppRoutingModule } from './app-routing.module';\r\n\r\n// Layout\r\nimport { PlayGameComponent } from './layout/play-game/play-game.component';\r\n\r\n// Components\r\nimport { AppComponent } from './app.component';\r\nimport { GameBoardComponent } from './components/game-board/game-board.component';\r\n\r\n// Pipes\r\nimport { MatrixPipe } from './pipes/matrix.pipe';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    GameBoardComponent,\r\n    MatrixPipe,\r\n    PlayGameComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    AppRoutingModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\nimport { EGameState } from 'src/app/enums/battleship.enum';\r\n\r\n@Component({\r\n  selector: 'app-play-game',\r\n  templateUrl: './play-game.component.html',\r\n  styleUrls: ['./play-game.component.scss']\r\n})\r\n\r\nexport class PlayGameComponent implements OnInit {\r\n  public gameState: EGameState = EGameState.PLAYING;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  public gameStateChanged(newGameState: EGameState) {\r\n    this.gameState = newGameState;\r\n  }\r\n\r\n  public newGame() {\r\n    this.gameState = EGameState.PLAYING;\r\n  }\r\n\r\n}\r\n","<header>\r\n    <h1 class=\"heading\">BattleShip</h1>\r\n</header>\r\n\r\n<main>\r\n    <app-game-board [gameState]=\"gameState\" (gameStateChanged)=\"gameStateChanged($event)\"></app-game-board>\r\n</main>\r\n\r\n<footer>\r\n    <button class=\"new-game-btn\" *ngIf=\"gameState !== 0\" (click)=\"newGame()\">New Game</button>\r\n</footer>","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({\r\n  name: 'matrixPipe'\r\n})\r\n\r\nexport class MatrixPipe implements PipeTransform {\r\n\r\n  transform(squareIndex: number, rowIndex: number, squaresPerRow: number): unknown {\r\n    let rowFirstSquare = squareIndex + 1 > rowIndex * squaresPerRow;\r\n    let rowLastSquare = squareIndex < (rowIndex + 1) * squaresPerRow;\r\n\r\n    return rowFirstSquare && rowLastSquare;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nimport { PlayGameComponent } from './layout/play-game/play-game.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'battleship', component: PlayGameComponent },\r\n  { path: '', pathMatch: 'full', redirectTo: 'battleship' }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\n\r\nexport class AppRoutingModule { }\r\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}